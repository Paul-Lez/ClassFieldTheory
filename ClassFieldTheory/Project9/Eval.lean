import Mathlib

variable {ùïú E F G : Type*}
  [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E] [NormedAddCommGroup F] [NormedSpace ùïú F] [NormedAddCommGroup G] [NormedSpace ùïú G]
  {f‚ÇÅ : F ‚Üí G} {f‚ÇÇ : E ‚Üí F} {g : E ‚Üí G}
  {p‚ÇÅ : FormalMultilinearSeries ùïú F G} {p‚ÇÇ : FormalMultilinearSeries ùïú E F}
  {x : E}

/-- A version of `HasFPowerSeriesOnBall.unique` for `HasFPowerSeriesAt`. -/
theorem HasFPowerSeriesAt.unique {f g : E ‚Üí F}
    {p : FormalMultilinearSeries ùïú E F} {x : E} (hf : HasFPowerSeriesAt f p x)
    (hg : HasFPowerSeriesAt g p x) : ‚àÉ r > 0, Set.EqOn f g (EMetric.ball x r) := by
  obtain ‚ü®rf, hf‚ü© := hf
  obtain ‚ü®rg, hg‚ü© := hg
  let r := min rf rg
  have hr : 0 < r := by simp [r, hf.r_pos, hg.r_pos]
  use r, hr
  replace hf := hf.mono hr (by simp [r])
  replace hg := hg.mono hr (by simp [r])
  exact HasFPowerSeriesOnBall.unique hf hg

theorem exists_pos_eqOn_ball_comp_of_hasFPowerSeriesAt
    (hf‚ÇÅ : HasFPowerSeriesAt f‚ÇÅ p‚ÇÅ (f‚ÇÇ x)) (hf‚ÇÇ : HasFPowerSeriesAt f‚ÇÇ p‚ÇÇ x)
    (hg : HasFPowerSeriesAt g (p‚ÇÅ.comp p‚ÇÇ) x) :
    ‚àÉ r > 0, (EMetric.ball x r).EqOn (f‚ÇÅ ‚àò f‚ÇÇ) g := by
  refine HasFPowerSeriesAt.unique ?_ hg
  exact HasFPowerSeriesAt.comp hf‚ÇÅ hf‚ÇÇ

variable [CompleteSpace G]

theorem hasFPowerSeriesAt_sum (h : 0 < p‚ÇÅ.radius) : HasFPowerSeriesAt p‚ÇÅ.sum p‚ÇÅ 0 := by
  refine ‚ü®p‚ÇÅ.radius, le_rfl, h, ?_‚ü©
  intro y hy
  rw [zero_add]
  exact FormalMultilinearSeries.hasSum p‚ÇÅ hy

variable [CompleteSpace F]

theorem exists_pos_eqOn_ball_sum_comp_comp (hp‚ÇÅ : 0 < p‚ÇÅ.radius) (hp‚ÇÇ : 0 < p‚ÇÇ.radius) (h‚ÇÄ : p‚ÇÇ.sum 0 = 0)
    (h_comp : HasFPowerSeriesAt (p‚ÇÅ.comp p‚ÇÇ).sum (p‚ÇÅ.comp p‚ÇÇ) 0) :
    ‚àÉ r > 0, (EMetric.ball 0 r).EqOn (p‚ÇÅ.sum ‚àò p‚ÇÇ.sum) (p‚ÇÅ.comp p‚ÇÇ).sum := by
  apply exists_pos_eqOn_ball_comp_of_hasFPowerSeriesAt (p‚ÇÅ := p‚ÇÅ) (p‚ÇÇ := p‚ÇÇ)
  ¬∑ rw [h‚ÇÄ]
    exact hasFPowerSeriesAt_sum hp‚ÇÅ
  ¬∑ exact hasFPowerSeriesAt_sum hp‚ÇÇ
  ¬∑ exact h_comp

variable [CompleteSpace E] {f‚ÇÅ : F ‚Üí E} {f‚ÇÇ : E ‚Üí F}
  {p‚ÇÅ : FormalMultilinearSeries ùïú F E} {p‚ÇÇ : FormalMultilinearSeries ùïú E F}
  {x : E}

-- Here, let `p‚ÇÅ` and `p‚ÇÇ` be `exp` and `log`.
theorem exists_pos_eqOn_ball_sum_comp_id (hp‚ÇÅ : 0 < p‚ÇÅ.radius) (hp‚ÇÇ : 0 < p‚ÇÇ.radius)
    (h : (p‚ÇÅ.comp p‚ÇÇ).sum = id)
    (h‚ÇÄ : p‚ÇÇ.sum 0 = 0)
    (h_comp : HasFPowerSeriesAt id (p‚ÇÅ.comp p‚ÇÇ) 0) :
    ‚àÉ r > 0, (EMetric.ball 0 r).EqOn (p‚ÇÅ.sum ‚àò p‚ÇÇ.sum) id := by
  suffices h : (p‚ÇÅ.comp p‚ÇÇ).sum = id by
    rw [‚Üê h]
    apply exists_pos_eqOn_ball_sum_comp_comp hp‚ÇÅ hp‚ÇÇ h‚ÇÄ
    rw [h]
    apply h_comp
  exact h































#exit
namespace PowerSeries

noncomputable section

variable {R S : Type*} [CommRing R] [SMul R S]
  [NormedRing S] [NormMulClass S] [CompleteSpace S]

def eval (f : R‚ü¶X‚üß) (a : S) : S := ‚àë' n, coeff R n f ‚Ä¢ a ^ n
#check FormalMultilinearSeries.comp
-- def mySubst (f g : R‚ü¶X‚üß) : R‚ü¶X‚üß := f.eval g

-- def partSum (f : R‚ü¶X‚üß) (a : S) (n : Nat) : S :=
--   ‚àë m ‚àà Finset.range n, coeff R m f ‚Ä¢ a ^ n

-- def eval (f : R‚ü¶X‚üß) (a : S) : S :=
--   (limUnder Filter.atTop (partSum f a))

-- theorem tendsto_nhds_eval (f : R‚ü¶X‚üß) (a : S) :
--   Filter.Tendsto (f.partSum a) Filter.atTop (nhds (eval f a)) :=
--     CauchySeq.tendsto_limUnder sorry

-- #check NormedAddCommGroup.tendsto_atTop
-- #check tendsto_nhds_unique

-- variable {R S : Type*} [CommRing R] [NormedCommRing S] [Algebra R S]

-- noncomputable def subst' (a : PowerSeries R) (f : R‚ü¶X‚üß) : PowerSeries R := f.subst a

theorem eval‚ÇÇ_subst (f g : PowerSeries R) (a : S) :
    eval (f.subst g) a = f.eval (g.eval a) := by
  unfold eval

  -- rw [Filter.limUnder_eq_iff sorry]
  rw??

variable {ùïú E : Type*} [Field ùïú] [NormedField E] [Module ùïú E] --[ContinuousAdd E]
  [ContinuousConstSMul ùïú E] (p q : FormalMultilinearSeries ùïú E E) --(x : E)

-- def subst : FormalMultilinearSeries ùïú E E :=
--   p.sum fun _ => q

#check FormalMultilinearSeries.sum

#check NormedSpace.exp
#check PowerSeries.exp

variable [Algebra ‚Ñö E] [IsTopologicalRing E] [CharZero E]
theorem bla (a : E) : NormedSpace.exp ‚Ñö a = (PowerSeries.exp E).eval a := by
  unfold eval
  rw [NormedSpace.exp_eq_tsum]
  congr! 2 with n
  simp
  rw [‚Üê Rat.cast_smul_eq_qsmul (R := E)]
  nth_rw 2 [‚Üê Rat.cast_natCast]
  norm_cast



#check Rat.cast_natCast
